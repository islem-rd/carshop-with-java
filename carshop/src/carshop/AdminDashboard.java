/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package carshop;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Comparator;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author ahmed
 */
public class AdminDashboard extends javax.swing.JFrame {

    /**
     * Creates new form AdminDashboard
     */
    public AdminDashboard() {
        initComponents();
        fetchUsers();
        fetchCars();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        username = new javax.swing.JLabel();
        LogOut = new javax.swing.JButton();
        Clients = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        modele = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        age = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        ids = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        marque = new javax.swing.JTextField();
        prix = new javax.swing.JTextField();
        delete = new javax.swing.JButton();
        update = new javax.swing.JButton();
        add = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        rented = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabadmin = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Admin DashBoard");

        jPanel2.setBackground(new java.awt.Color(33, 72, 192));
        jPanel2.setMaximumSize(null);

        jPanel3.setBackground(new java.awt.Color(33, 126, 225));
        jPanel3.setMaximumSize(new java.awt.Dimension(197, 1000));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/carshop/user icon.png"))); // NOI18N

        username.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 18)); // NOI18N
        username.setForeground(new java.awt.Color(255, 255, 255));
        username.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        username.setText("ADMIN");
        username.setToolTipText("");

        LogOut.setBackground(new java.awt.Color(33, 72, 192));
        LogOut.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        LogOut.setForeground(new java.awt.Color(255, 255, 255));
        LogOut.setText("Back");
        LogOut.setFocusPainted(false);
        LogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogOutActionPerformed(evt);
            }
        });

        Clients.setBackground(new java.awt.Color(33, 72, 192));
        Clients.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        Clients.setForeground(new java.awt.Color(255, 255, 255));
        Clients.setText("Clients");
        Clients.setFocusPainted(false);
        Clients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(jLabel1))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(username, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LogOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Clients, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Clients, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(LogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );

        jPanel1.setBackground(new java.awt.Color(33, 72, 192));

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Model");

        modele.setBackground(new java.awt.Color(33, 126, 225));
        modele.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 18)); // NOI18N
        modele.setForeground(new java.awt.Color(255, 255, 255));
        modele.setHighlighter(null);
        modele.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeleActionPerformed(evt);
            }
        });

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Marque");

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Age");

        age.setBackground(new java.awt.Color(33, 126, 225));
        age.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 18)); // NOI18N
        age.setForeground(new java.awt.Color(255, 255, 255));
        age.setHighlighter(null);
        age.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ageActionPerformed(evt);
            }
        });

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Price");

        ids.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 12)); // NOI18N
        ids.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select an ID To Update" }));
        ids.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idsActionPerformed(evt);
            }
        });

        jLabel11.setBackground(new java.awt.Color(255, 255, 255));
        jLabel11.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Car ID");

        marque.setBackground(new java.awt.Color(33, 126, 225));
        marque.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 18)); // NOI18N
        marque.setForeground(new java.awt.Color(255, 255, 255));
        marque.setHighlighter(null);
        marque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                marqueActionPerformed(evt);
            }
        });

        prix.setBackground(new java.awt.Color(33, 126, 225));
        prix.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 18)); // NOI18N
        prix.setForeground(new java.awt.Color(255, 255, 255));
        prix.setHighlighter(null);
        prix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prixActionPerformed(evt);
            }
        });

        delete.setBackground(new java.awt.Color(255, 102, 102));
        delete.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        delete.setForeground(new java.awt.Color(255, 255, 255));
        delete.setText("Delete");
        delete.setFocusPainted(false);
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        update.setBackground(new java.awt.Color(0, 204, 204));
        update.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        update.setForeground(new java.awt.Color(255, 255, 255));
        update.setText("Update");
        update.setFocusPainted(false);
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        add.setBackground(new java.awt.Color(51, 153, 0));
        add.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        add.setForeground(new java.awt.Color(255, 255, 255));
        add.setText("Add");
        add.setFocusPainted(false);
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        jLabel12.setBackground(new java.awt.Color(255, 255, 255));
        jLabel12.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Rented By");

        rented.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 12)); // NOI18N
        rented.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a User" }));
        rented.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(128, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(modele, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(marque, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(age, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(prix, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ids, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rented, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(107, 107, 107)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(update, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(86, 86, 86))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(modele, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(marque, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(rented, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(age, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(prix, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(59, 59, 59)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(ids, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(71, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        tabadmin.setAutoCreateRowSorter(true);
        tabadmin.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        tabadmin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "modele", "marque", "age", "prix", "Rented"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(tabadmin.getModel());
        
     // Custom comparator for the "Id" column (index 0)
        sorter.setComparator(0, new Comparator<Object>() {
            @Override
            public int compare(Object o1, Object o2) {
                try {
                    // Parse the string values to integers for comparison
                    Integer id1 = (o1 == null || o1.toString().isEmpty()) ? 0 : Integer.parseInt(o1.toString());
                    Integer id2 = (o2 == null || o2.toString().isEmpty()) ? 0 : Integer.parseInt(o2.toString());
                    return Integer.compare(id1, id2);
                } catch (NumberFormatException e) {
                    // If parsing fails, you can return 0 or handle the error as needed
                    return 0;
                }
            }
        });
        //sorter lel age
        
        sorter.setComparator(3, new Comparator<Object>() {
            @Override
            public int compare(Object o1, Object o2) {
                try {
                    // Parse the string values to integers for comparison
                    Integer x = (o1 == null || o1.toString().isEmpty()) ? 0 : Integer.parseInt(o1.toString());
                    Integer y = (o2 == null || o2.toString().isEmpty()) ? 0 : Integer.parseInt(o2.toString());
                    return Integer.compare(x, y);
                } catch (NumberFormatException e) {
                    
                    return 0;
                }
            }
        });
        sorter.setComparator(4, new Comparator<Object>() {
            @Override
            public int compare(Object o1, Object o2) {
                try {
                    // Parse the string values to doubles for comparison
                    Double price1 = (o1 == null || o1.toString().isEmpty()) ? 0.0 : Double.parseDouble(o1.toString());
                    Double price2 = (o2 == null || o2.toString().isEmpty()) ? 0.0 : Double.parseDouble(o2.toString());
                    return Double.compare(price1, price2);
                } catch (NumberFormatException e) {
                    // If parsing fails, you can return 0 or handle the error as needed
                    return 0;
                }
            }
        });
        // Apply the sorter to the table
        tabadmin.setRowSorter(sorter);
        tabadmin.setMaximumSize(new java.awt.Dimension(405, 80));
        tabadmin.setMinimumSize(new java.awt.Dimension(405, 80));
        jScrollPane1.setViewportView(tabadmin);
        if (tabadmin.getColumnModel().getColumnCount() > 0) {
            tabadmin.getColumnModel().getColumn(0).setMinWidth(30);
            tabadmin.getColumnModel().getColumn(0).setPreferredWidth(30);
            tabadmin.getColumnModel().getColumn(0).setMaxWidth(60);
            tabadmin.getColumnModel().getColumn(1).setMinWidth(150);
        }

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    public int getId(String name) {
        String query = "SELECT id FROM users WHERE username = ?";
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/carshop", "root", "");
             PreparedStatement pst = conn.prepareStatement(query)) {

            // Set the parameter for the query
            pst.setString(1, name);

            // Execute the query and retrieve the result
            try (ResultSet rs = pst.executeQuery()) {
                if (rs.next()) {
                    int userId = rs.getInt("id"); // Get the id column as an int
                    System.out.println("User ID: " + userId);
                    return userId;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return -1;  // Return a default value (e.g., -1) if the user is not found
    }

    public void fetchUsers(){
        rented.removeAllItems();
        rented.addItem("Not Rented");
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        try {
            // Connect to the database
            String url = "jdbc:mysql://localhost:3306/carshop"; // Update with your DB URL
            String user = "root"; // Update with your DB username
            String password = ""; // Update with your DB password

            connection = DriverManager.getConnection(url, user, password);

            // SQL query to fetch user data
            String query = "SELECT username FROM users"; // Adjust your query as needed

            // Create a prepared statement and execute the query
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();

            // Add fetched users to the JComboBox
            while (resultSet.next()) {
                String username = resultSet.getString("username");
                rented.addItem(username); // Add username to JComboBox
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error fetching users: " + e.getMessage());
        } finally {
            try {
                if (resultSet != null) resultSet.close();
                if (preparedStatement != null) preparedStatement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    public void fetchCars() {
    String url = "jdbc:mysql://localhost:3306/carshop"; // DB URL
    String dbUser = "root"; // DB username
    String dbPassword = ""; // DB password
    // Updated SQL query to include renter's name
    String query = "SELECT cars.id, cars.model, cars.age, cars.prix, cars.marque, cars.is_rented, " +
                   "users.username AS rented_by " +
                   "FROM cars " +
                   "LEFT JOIN users ON cars.rented_by = users.id";

    try (Connection connection = DriverManager.getConnection(url, dbUser, dbPassword);
        PreparedStatement preparedStatement = connection.prepareStatement(query)) {

        // Execute the query and get the result set
        ResultSet resultSet = preparedStatement.executeQuery();
        
        // Get the table model
        DefaultTableModel model = (DefaultTableModel) tabadmin.getModel();
        
        model.setRowCount(0);  // Clear any existing data
        ids.removeAllItems();
        ids.addItem("Select a Car Id");

        // Loop through the ResultSet and add rows to the JTable model
        while (resultSet.next()) {
            int id = resultSet.getInt("id");
            String modelValue = resultSet.getString("model");
            int age = resultSet.getInt("age");
            double prix = resultSet.getDouble("prix");
            String marque = resultSet.getString("marque");
            boolean isRented = resultSet.getBoolean("is_rented");
            String rentedBy = resultSet.getString("rented_by"); // Renter's username or null if not rented

            ids.addItem(String.valueOf(id));

            // Add row to the table model
            model.addRow(new Object[]{
                id, 
                modelValue, 
                marque, 
                age, 
                prix, 
                isRented ? "Rented by " + rentedBy  : "Not Rented"
            });
        }

    } catch (SQLException e) {
        e.printStackTrace();
        System.out.println("Database error: " + e.getMessage());
    }

    tabadmin.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseClicked(MouseEvent e) {
            int selectedRow = tabadmin.getSelectedRow();
            if (selectedRow != -1) {
                // Get data from the selected row
                int id = (int) tabadmin.getValueAt(selectedRow, 0);
                String modelValue = (String) tabadmin.getValueAt(selectedRow, 1);
                String mark = (String) tabadmin.getValueAt(selectedRow, 2);
                int ag = (int) tabadmin.getValueAt(selectedRow, 3);
                double price = (double) tabadmin.getValueAt(selectedRow, 4);
                String rentedInfo = (String) tabadmin.getValueAt(selectedRow, 5);

                // Handle case where the car is not rented
                if ("Not Rented".equals(rentedInfo)) {
                    rentedInfo = "Not Rented";  // Or you could set this to null
                }

                // Populate text fields
                ids.setSelectedItem(String.valueOf(id));
                modele.setText(modelValue);
                age.setText(String.valueOf(ag));
                prix.setText(String.valueOf(price));
                marque.setText(mark);
                System.out.println("Database error: " + rentedInfo);
                
                // Check if rentedInfo starts with "Rented by" before extracting the username
                if (rentedInfo.startsWith("Rented by ")) {
                    String rentedBy = rentedInfo.substring(10).trim();  // Extract the name
                    rented.setSelectedItem(rentedBy);  // Set the combo box to the user's name
                } else {
                    rented.setSelectedItem("Not Rented");  // Or null, depending on your design
                }
            }
        }
    });

}

    private void LogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogOutActionPerformed
        FirstPage firstpage = new FirstPage();
        firstpage.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_LogOutActionPerformed

    
    
    
    



    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        String carId = (String) ids.getSelectedItem(); 

        // Validate if a car ID is selected
        if ("Select an ID To Update".equals(carId)) {
            JOptionPane.showMessageDialog(this, "Please select a car ID to update.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get values from text fields
        String mdl = modele.getText();
        String mark = marque.getText();
        String ageText = age.getText();  
        String prixText = prix.getText(); 
        
        String rentedByName = (String) rented.getSelectedItem();
        boolean isRented = false;
        int rentedById = -1;
        // Validate if a car ID is selected
        if (!"Not Rented".equals(rentedByName)) {
            isRented = true;
            rentedById = getId(rentedByName);
        }

        // Start building the SQL query dynamically
        StringBuilder queryBuilder = new StringBuilder("UPDATE cars SET ");
        

        // Apply constraints and add to the query if valid
        if (!mdl.isEmpty() && mdl.length() <= 100) {
            queryBuilder.append("model = ?, ");
            
        }

        if (!mark.isEmpty() && mark.length() <= 100) {
            queryBuilder.append("marque = ?, ");
            
        }

        Integer ag = null;
        if (!ageText.isEmpty()) {
            try {
                ag = Integer.valueOf(ageText);
                if (ag >= 0 && ag <= 100) {
                    queryBuilder.append("age = ?, ");
                    
                } else {
                    JOptionPane.showMessageDialog(this, "Age must be between 0 and 100.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid age. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        Double prx = null;
        if (!prixText.isEmpty()) {
            try {
                prx = Double.valueOf(prixText);
                if (prx > 0) {
                    queryBuilder.append("prix = ?, ");

                } else {
                    JOptionPane.showMessageDialog(this, "Price must be greater than zero.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid price. Please enter a valid decimal number.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        // Always update the rent status
        queryBuilder.append("is_rented = ? ");
        

        // Check if any fields are to be updated
        if(isRented){
            queryBuilder.append(",rented_by = ? ");
        }

        // Finalize the query by adding the WHERE clause
        queryBuilder.append("WHERE id = ?");

        // Database update logic
        String url = "jdbc:mysql://localhost:3306/carshop";  // Replace with your database URL
        String dbUsername = "root";  // Replace with your DB username
        String dbPassword = "";  // Replace with your DB password

        try (Connection conn = DriverManager.getConnection(url, dbUsername, dbPassword);
             PreparedStatement pst = conn.prepareStatement(queryBuilder.toString())) {

            int paramIndex = 1;

            // Set the parameters in the query
            if (!mdl.isEmpty() && mdl.length() <= 100) pst.setString(paramIndex++, mdl);
            if (!mark.isEmpty() && mark.length() <= 100) pst.setString(paramIndex++, mark);
            if (ag != null) pst.setInt(paramIndex++, ag);
            if (prx != null) pst.setDouble(paramIndex++, prx);
            pst.setBoolean(paramIndex++, isRented);
            if(isRented){
                pst.setInt(paramIndex++, rentedById);
            }
            
            pst.setString(paramIndex++, carId); 

            // Execute the query
            int rowsAffected = pst.executeUpdate();

            if (rowsAffected > 0) {
                fetchCars();
                fetchUsers();// Refresh 
                JOptionPane.showMessageDialog(this, "Car updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

                // Clear the fields
                modele.setText("");
                marque.setText("");
                age.setText("");
                prix.setText("");
                
                
            } else {
                JOptionPane.showMessageDialog(this, "Update failed. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage() + queryBuilder, "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    
    }//GEN-LAST:event_updateActionPerformed

    private void ClientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientsActionPerformed
        ClientsManager clientmanager = new ClientsManager();
        
        clientmanager.setVisible(true);
        
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_ClientsActionPerformed

    private void modeleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_modeleActionPerformed

    private void ageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ageActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        int[] selectedRows = tabadmin.getSelectedRows();

        if (selectedRows.length == 0) {
            // No row is selected
            JOptionPane.showMessageDialog(this, "Please select at least one row to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Confirm deletion
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the selected car(s)?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            // Prepare the DELETE query
            String url = "jdbc:mysql://localhost:3306/carshop";  // Replace with your database URL
            String dbUsername = "root";  // Replace with your DB username
            String dbPassword = "";  // Replace with your DB password

            String query = "DELETE FROM cars WHERE id = ?";  // Query to delete the car by ID

            try (Connection conn = DriverManager.getConnection(url, dbUsername, dbPassword);
                 PreparedStatement pst = conn.prepareStatement(query)) {

                for (int row : selectedRows) {
                    // Get the car ID from the first column (assuming the ID is in the first column)
                    String carId = tabadmin.getValueAt(row, 0).toString();  // Get ID from the first column

                    // Set the car ID for the DELETE query
                    pst.setInt(1, Integer.parseInt(carId));  // Convert ID to integer
                    pst.executeUpdate();  // Execute the delete query for this row
                }

                // After deleting the selected rows from the database, update the table
                fetchCars();
                modele.setText("");  // Clear the model text field
                marque.setText("");  // Clear the marque text field
                age.setText("");     // Clear the age text field
                prix.setText("");    // Clear the price text field
                // Assuming this method repopulates the table with updated data
                JOptionPane.showMessageDialog(this, "Selected car(s) deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

            } catch (SQLException ex) {
                // Handle exceptions (e.g., database connection errors)
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
        
        String mdl = modele.getText();
        String mark = marque.getText();
        String ageText = age.getText();  // Keep this as String
        String prixText = prix.getText();  // Keep this as String
        int rentedById = 30;
        String rentedByName = (String) rented.getSelectedItem(); // Assuming idComboBox is your JComboBox for IDs
        boolean isRented = true;
        // Validate if a car ID is selected
        if ("Not Rented".equals(rentedByName)) {
            isRented = false;
        }else{
            rentedById = getId(rentedByName);
        }

        // Validate Model (non-empty, max length 100)
        if (mdl.isEmpty() || mdl.length() > 100) {
            JOptionPane.showMessageDialog(this, "Invalid model name. It should not be empty and should be less than 100 characters.", "Error", JOptionPane.ERROR_MESSAGE);
            return;  // Exit the method to prevent further processing
        }

        // Validate Marque (non-empty, max length 100)
        if (mark.isEmpty() || mark.length() > 100) {
            JOptionPane.showMessageDialog(this, "Invalid marque name. It should not be empty and should be less than 100 characters.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate Age (non-negative integer, reasonable range)
        int ag = -1;
        try {
            ag = Integer.parseInt(ageText);
            if (ag < 0 || ag > 100) {
                JOptionPane.showMessageDialog(this, "Age must be between 0 and 100.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid age. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate Price (positive decimal number)
        double prx = -1;
        try {
            prx = Double.parseDouble(prixText);
            if (prx <= 0) {
                JOptionPane.showMessageDialog(this, "Price must be greater than zero.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid price. Please enter a valid decimal number.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Now proceed with database insertion if all validations pass
        String url = "jdbc:mysql://localhost:3306/carshop";  // Replace with your database URL
        String dbUsername = "root";  // Replace with your DB username
        String dbPassword = "";  // Replace with your DB password

        String query;
        if (isRented) {
            query = "INSERT INTO cars (model, marque, age, prix, is_rented, rented_by) VALUES (?, ?, ?, ?, ?, ?)";
        } else {
            query = "INSERT INTO cars (model, marque, age, prix, is_rented, rented_by) VALUES (?, ?, ?, ?, ?, NULL)"; // Set rented_by to NULL
        }
        try (Connection conn = DriverManager.getConnection(url, dbUsername, dbPassword);
             PreparedStatement pst = conn.prepareStatement(query)) {

            // Set parameters for the SQL query
            pst.setString(1, mdl);
            pst.setString(2, mark);
            pst.setInt(3, ag);   // Integer
            pst.setDouble(4, prx);   // Double
            pst.setBoolean(5, isRented);  // Boolean
            if(isRented){
                pst.setInt(6, rentedById);
            }
            System.out.println("Executing Query: " + query);
            System.out.println("Parameters: ");
            System.out.println("Model: " + mdl);
            System.out.println("Marque: " + mark);
            System.out.println("Age: " + ag);
            System.out.println("Price: " + prx);
            System.out.println("Is Rented: " + isRented);
            if (isRented) {
                System.out.println("Rented By ID: " + rentedById);
            }
            // Execute the query
            int rowsAffected = pst.executeUpdate();

            if (rowsAffected > 0) {
                fetchCars();
                modele.setText("");  // Clear the model text field
                marque.setText("");  // Clear the marque text field
                age.setText("");     // Clear the age text field
                prix.setText("");    // Clear the price text field
                
                JOptionPane.showMessageDialog(this, "Added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            // Handle exceptions (e.g., database connection errors)
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage() , "Database Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_addActionPerformed

    private void marqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_marqueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_marqueActionPerformed

    private void prixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prixActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_prixActionPerformed

    private void idsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idsActionPerformed

    private void rentedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rentedActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Clients;
    private javax.swing.JButton LogOut;
    private javax.swing.JButton add;
    private javax.swing.JTextField age;
    private javax.swing.JButton delete;
    private javax.swing.JComboBox<String> ids;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField marque;
    private javax.swing.JTextField modele;
    private javax.swing.JTextField prix;
    private javax.swing.JComboBox<String> rented;
    private javax.swing.JTable tabadmin;
    private javax.swing.JButton update;
    private javax.swing.JLabel username;
    // End of variables declaration//GEN-END:variables

}
