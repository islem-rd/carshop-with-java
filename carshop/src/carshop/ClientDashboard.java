/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package carshop;

import java.sql.DriverManager;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Comparator;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
// Import ResultSet as well
 // Import Statement to execute queries

/**
 *
 * @author ahmed
 */
public class ClientDashboard extends javax.swing.JFrame {

    /**
     * Creates new form ClientDashboard
     */
    
    String userId; 
    String userName;

    
    public ClientDashboard(String Id) {
        
        this.userId = Id;
        
        initComponents();
        
        fetchUserDetails();
        
        fetchCars();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
     
    public void fetchCars() {
        String url = "jdbc:mysql://localhost:3306/carshop"; // DB URL
        String dbUser = "root"; // DB username
        String dbPassword = ""; // DB password
        String query = "SELECT id,model,age,prix,marque,is_rented FROM cars"; // SQL query

        try (Connection connection = DriverManager.getConnection(url, dbUser, dbPassword);
            PreparedStatement preparedStatement = connection.prepareStatement(query)) {

            // Execute the query and get the result set
            ResultSet resultSet = preparedStatement.executeQuery();
            
            // Get the table model
            DefaultTableModel model = (DefaultTableModel) tabclient.getModel();
            model.setRowCount(0);  // Clear any existing data

            // Loop through the ResultSet and add rows to the JTable model
            while (resultSet.next()) {
                // Fetch each column by index or column name
                String carId = resultSet.getString("id");
                String modelValue = resultSet.getString("model");
                int age = resultSet.getInt("age");
                double prix = resultSet.getDouble("prix");
                String marque = resultSet.getString("marque");
                boolean isRented = resultSet.getBoolean("is_rented");

                // Add row to the table model
                model.addRow(new Object[]{carId ,modelValue, marque,age, prix,  isRented});
            }

        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Database error: " + e.getMessage());
        }
    }
    
    private void fetchUserDetails() {
        String url = "jdbc:mysql://localhost:3306/carshop"; // Replace with your DB URL
        String dbUser = "root"; // Replace with your DB username
        String dbPassword = ""; // Replace with your DB password

        // SQL query to fetch user details based on userId
        String query = "SELECT username FROM users WHERE id = ?";

        try (Connection connection = DriverManager.getConnection(url, dbUser, dbPassword);
             PreparedStatement preparedStatement = connection.prepareStatement(query)) {

            // Set the userId in the query
            preparedStatement.setString(1, userId);

            // Execute the query
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    // Retrieve user details
                    userName = resultSet.getString("username");
                    System.out.println(userName);
                

                    if (userName.length() > 7) {
                        username.setText(userName.substring(0, 7) + "..");
                    } else {
                        username.setText(userName);
                    }
                    
                }else{
                    System.out.println("User not found for ID: " + userId);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Database error: " + e.getMessage());
        }
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        username = new javax.swing.JLabel();
        LogOut = new javax.swing.JButton();
        settings = new javax.swing.JButton();
        mycars = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabclient = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        Rent = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(null);
        setMinimumSize(null);
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(33, 72, 192));
        jPanel2.setMaximumSize(null);

        jPanel3.setBackground(new java.awt.Color(33, 126, 225));
        jPanel3.setMaximumSize(new java.awt.Dimension(197, 1000));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/carshop/user icon.png"))); // NOI18N

        username.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 18)); // NOI18N
        username.setForeground(new java.awt.Color(255, 255, 255));
        username.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        username.setText("ahmed");
        username.setToolTipText("");

        LogOut.setBackground(new java.awt.Color(33, 72, 192));
        LogOut.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        LogOut.setForeground(new java.awt.Color(255, 255, 255));
        LogOut.setText("Log Out");
        LogOut.setFocusPainted(false);
        LogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogOutActionPerformed(evt);
            }
        });

        settings.setBackground(new java.awt.Color(33, 72, 192));
        settings.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        settings.setForeground(new java.awt.Color(255, 255, 255));
        settings.setText("Settings");
        settings.setFocusPainted(false);
        settings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsActionPerformed(evt);
            }
        });

        mycars.setBackground(new java.awt.Color(33, 72, 192));
        mycars.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        mycars.setForeground(new java.awt.Color(255, 255, 255));
        mycars.setText("My Cars");
        mycars.setFocusPainted(false);
        mycars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mycarsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(settings, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .addComponent(username, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LogOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(mycars, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(jLabel1)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mycars, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(settings, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );

        jPanel1.setBackground(new java.awt.Color(33, 72, 192));
        tabclient.setAutoCreateRowSorter(true);
        tabclient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id", "modele", "marque", "age", "prix", "Rented"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabclient);
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(tabclient.getModel());
        sorter.setComparator(5, new Comparator<Boolean>() {
            @Override
            public int compare(Boolean o1, Boolean o2) {
                return Boolean.compare(o1, o2);
            }
        });
     // Custom comparator for the "Id" column (index 0)
        sorter.setComparator(0, new Comparator<Object>() {
            @Override
            public int compare(Object o1, Object o2) {
                try {
                    // Parse the string values to integers for comparison
                    Integer id1 = (o1 == null || o1.toString().isEmpty()) ? 0 : Integer.parseInt(o1.toString());
                    Integer id2 = (o2 == null || o2.toString().isEmpty()) ? 0 : Integer.parseInt(o2.toString());
                    return Integer.compare(id1, id2);
                } catch (NumberFormatException e) {
                    // If parsing fails, you can return 0 or handle the error as needed
                    return 0;
                }
            }
        });
        //sorter lel age
        
        sorter.setComparator(3, new Comparator<Object>() {
            @Override
            public int compare(Object o1, Object o2) {
                try {
                    // Parse the string values to integers for comparison
                    Integer x = (o1 == null || o1.toString().isEmpty()) ? 0 : Integer.parseInt(o1.toString());
                    Integer y = (o2 == null || o2.toString().isEmpty()) ? 0 : Integer.parseInt(o2.toString());
                    return Integer.compare(x, y);
                } catch (NumberFormatException e) {
                    
                    return 0;
                }
            }
        });
        sorter.setComparator(4, new Comparator<Object>() {
            @Override
            public int compare(Object o1, Object o2) {
                try {
                    // Parse the string values to doubles for comparison
                    Double price1 = (o1 == null || o1.toString().isEmpty()) ? 0.0 : Double.parseDouble(o1.toString());
                    Double price2 = (o2 == null || o2.toString().isEmpty()) ? 0.0 : Double.parseDouble(o2.toString());
                    return Double.compare(price1, price2);
                } catch (NumberFormatException e) {
                    // If parsing fails, you can return 0 or handle the error as needed
                    return 0;
                }
            }
        });
        // Apply the sorter to the table
        tabclient.setRowSorter(sorter);
        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(33, 72, 192));

        Rent.setBackground(new java.awt.Color(33, 126, 225));
        Rent.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        Rent.setForeground(new java.awt.Color(255, 255, 255));
        Rent.setText("Rent");
        Rent.setFocusPainted(false);
        Rent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(315, 315, 315)
                .addComponent(Rent, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                .addGap(357, 357, 357))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addComponent(Rent, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void LogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogOutActionPerformed
            ClientLogIn clientLogInFrame = new ClientLogIn();
            clientLogInFrame.setVisible(true);
            this.setVisible(false);
    }//GEN-LAST:event_LogOutActionPerformed

    private void settingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsActionPerformed
        System.out.println(userId);
        Settings settings = new Settings(userId);
        settings.setVisible(true);
        this.setVisible(false);
        
    }//GEN-LAST:event_settingsActionPerformed

    private void RentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RentActionPerformed
        int selectedRow = tabclient.getSelectedRow();
    
        // Check if exactly one row is selected
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a car to rent.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }
        System.out.println("ahla");
        // Get the car's rental status from the table
        Boolean isRented = (Boolean) tabclient.getValueAt(selectedRow, 5); // Adjust index if column order changes
        System.out.println(isRented);
        // Check if the selected car is already rented
        if (isRented) {
            JOptionPane.showMessageDialog(this, "The selected car is already rented. Please choose another car.", "Car Rented", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Proceed with renting the car
        String idString = (String) tabclient.getValueAt(selectedRow, 0); // Assuming column 0 is the ID
        int carId;
        try {
            carId = Integer.parseInt(idString);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid car ID format.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int clientId = Integer.parseInt(this.userId);// Replace with the logic to fetch the logged-in user's ID

        // Confirm rental action
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to rent this car?", "Confirm Rental", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        // Update the database
        String url = "jdbc:mysql://localhost:3306/carshop"; // DB URL
        String dbUser = "root"; // DB username
        String dbPassword = ""; // DB password
        String query = "UPDATE cars SET is_rented = 1, rented_by = ? WHERE id = ?";

        try (Connection connection = DriverManager.getConnection(url, dbUser, dbPassword);
             PreparedStatement preparedStatement = connection.prepareStatement(query)) {

            preparedStatement.setInt(1, clientId);
            preparedStatement.setInt(2, carId);

            int rowsAffected = preparedStatement.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Car rented successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                fetchCars(); // Refresh the car list to update the table
            } else {
                JOptionPane.showMessageDialog(this, "Error renting the car. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_RentActionPerformed

    private void mycarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mycarsActionPerformed
        MyCars mc = new MyCars(Integer.parseInt(userId),userName);
        mc.setVisible(true);
        this.setVisible(false);
        this.dispose();
        
        
        
    }//GEN-LAST:event_mycarsActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton LogOut;
    private javax.swing.JButton Rent;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton mycars;
    private javax.swing.JButton settings;
    private javax.swing.JTable tabclient;
    private javax.swing.JLabel username;
    // End of variables declaration//GEN-END:variables

    
}
