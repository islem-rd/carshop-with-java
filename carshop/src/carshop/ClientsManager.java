/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package carshop;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Comparator;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
/**
 *
 * @author ahmed
 */
public class ClientsManager extends javax.swing.JFrame {

    /**
     * Creates new form ClientsManager
     */
    public ClientsManager() {
        initComponents();
        fetchClients();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    public void fetchClients() {
        
        String url = "jdbc:mysql://localhost:3306/carshop"; // DB URL
        String dbUser = "root"; // DB username
        String dbPassword = ""; // DB password
        String query = "SELECT id,username,email,password,city from users"; // SQL query
        
        try (Connection connection = DriverManager.getConnection(url, dbUser, dbPassword);
            PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            
            // Execute the query and get the result set
            ResultSet resultSet = preparedStatement.executeQuery();
            
            // Get the table model
            DefaultTableModel model = (DefaultTableModel) tabclient.getModel();
            model.setRowCount(0);  // Clear any existing data
            ids.removeAllItems();
            ids.addItem("Select an ID To Update");
            // Loop through the ResultSet and add rows to the JTable model
            while (resultSet.next()) {
            int id = resultSet.getInt("id");
            String name = resultSet.getString("username");
            String email = resultSet.getString("email");
            String password = resultSet.getString("password");
            String city = resultSet.getString("city");
            ids.addItem(String.valueOf(id));

            // Add row to the table model
            model.addRow(new Object[]{id, name, email, password, city});
        }

        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Database error: " + e.getMessage());
        }
        tabclient.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseClicked(MouseEvent e) {
            int selectedRow = tabclient.getSelectedRow();
            if (selectedRow != -1) {
                // Get data from the selected row
                int id = (int) tabclient.getValueAt(selectedRow, 0);
                String usernameValue = (String) tabclient.getValueAt(selectedRow, 1);
                String emailValue = (String) tabclient.getValueAt(selectedRow, 2);
                String passwordValue = (String) tabclient.getValueAt(selectedRow, 3);
                String cityValue = (String) tabclient.getValueAt(selectedRow, 4);

                // Populate text fields and ComboBox
                ids.setSelectedItem(String.valueOf(id));
                Username.setText(usernameValue);
                Email.setText(emailValue);
                Password.setText(passwordValue);
                ct.setSelectedItem(cityValue); // Assuming 'ct' is a ComboBox for cities
            }
        }
    });
        
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txt = new javax.swing.JLabel();
        LogOut = new javax.swing.JButton();
        Cars = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        Username = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        Password = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        ids = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        Email = new javax.swing.JTextField();
        delete = new javax.swing.JButton();
        update = new javax.swing.JButton();
        add = new javax.swing.JButton();
        filter = new javax.swing.JButton();
        ct = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabclient = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(33, 72, 192));
        jPanel2.setMaximumSize(null);

        jPanel3.setBackground(new java.awt.Color(33, 126, 225));
        jPanel3.setMaximumSize(new java.awt.Dimension(197, 1000));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/carshop/user icon.png"))); // NOI18N

        txt.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 18)); // NOI18N
        txt.setForeground(new java.awt.Color(255, 255, 255));
        txt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txt.setText("ADMIN");
        txt.setToolTipText("");

        LogOut.setBackground(new java.awt.Color(33, 72, 192));
        LogOut.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        LogOut.setForeground(new java.awt.Color(255, 255, 255));
        LogOut.setText("Back");
        LogOut.setFocusPainted(false);
        LogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogOutActionPerformed(evt);
            }
        });

        Cars.setBackground(new java.awt.Color(33, 72, 192));
        Cars.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        Cars.setForeground(new java.awt.Color(255, 255, 255));
        Cars.setText("Cars");
        Cars.setFocusPainted(false);
        Cars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CarsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(jLabel1))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LogOut, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .addComponent(Cars, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Cars, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(LogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );

        jPanel1.setBackground(new java.awt.Color(33, 72, 192));

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Username");

        Username.setBackground(new java.awt.Color(33, 126, 225));
        Username.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 18)); // NOI18N
        Username.setForeground(new java.awt.Color(255, 255, 255));
        Username.setHighlighter(null);
        Username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsernameActionPerformed(evt);
            }
        });

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Email");

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Password");

        Password.setBackground(new java.awt.Color(33, 126, 225));
        Password.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 18)); // NOI18N
        Password.setForeground(new java.awt.Color(255, 255, 255));
        Password.setHighlighter(null);
        Password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasswordActionPerformed(evt);
            }
        });

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("City");

        ids.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 12)); // NOI18N
        ids.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select an ID To Update" }));
        ids.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idsActionPerformed(evt);
            }
        });

        jLabel11.setBackground(new java.awt.Color(255, 255, 255));
        jLabel11.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("ID");

        Email.setBackground(new java.awt.Color(33, 126, 225));
        Email.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 18)); // NOI18N
        Email.setForeground(new java.awt.Color(255, 255, 255));
        Email.setHighlighter(null);
        Email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmailActionPerformed(evt);
            }
        });

        delete.setBackground(new java.awt.Color(255, 102, 102));
        delete.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        delete.setForeground(new java.awt.Color(255, 255, 255));
        delete.setText("Delete");
        delete.setFocusPainted(false);
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        update.setBackground(new java.awt.Color(0, 204, 204));
        update.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        update.setForeground(new java.awt.Color(255, 255, 255));
        update.setText("Update");
        update.setFocusPainted(false);
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        add.setBackground(new java.awt.Color(51, 153, 0));
        add.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        add.setForeground(new java.awt.Color(255, 255, 255));
        add.setText("Add");
        add.setFocusPainted(false);
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        filter.setBackground(new java.awt.Color(153, 153, 153));
        filter.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        filter.setForeground(new java.awt.Color(255, 255, 255));
        filter.setText("Filter By");
        filter.setFocusPainted(false);
        filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterActionPerformed(evt);
            }
        });

        ct.setBackground(new java.awt.Color(33, 126, 225));
        ct.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        ct.setForeground(new java.awt.Color(255, 255, 255));
        ct.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tunis", "Ariana", "Ben Arous", "Bizerte", "Beja", "Jendouba", "Zaghouan", "Sousse", "Monastir", "Mahdia", "Sfax", "Gabes", "Medenine", "Tataouine", "Tozeur", "Kebili", "Kairouan", "Sidi Bouzid", "Kasserine", "Gafsa", "Siliana", "El Kef", "Nabeul", "Manouba" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(75, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Email, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                            .addComponent(Username)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Password, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(68, 68, 68)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ct, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ids, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(107, 107, 107)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(update, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(filter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(86, 86, 86))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ct, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(43, 43, 43)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ids, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Username, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Email, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Password, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(filter, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        tabclient.setAutoCreateRowSorter(true);
        tabclient.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        tabclient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Username", "Email", "Password", "City"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(tabclient.getModel());
        
        // Custom comparator for the "Id" column (index 0)
           sorter.setComparator(0, new Comparator<Object>() {
               @Override
               public int compare(Object o1, Object o2) {
                   try {
                       // Parse the string values to integers for comparison
                       Integer id1 = (o1 == null || o1.toString().isEmpty()) ? 0 : Integer.parseInt(o1.toString());
                       Integer id2 = (o2 == null || o2.toString().isEmpty()) ? 0 : Integer.parseInt(o2.toString());
                       return Integer.compare(id1, id2);
                   } catch (NumberFormatException e) {
                       // If parsing fails, you can return 0 or handle the error as needed
                       return 0;
                   }
               }
           });
           //sorter lel age

        tabclient.setRowSorter(sorter);
        tabclient.setMaximumSize(new java.awt.Dimension(405, 80));
        tabclient.setMinimumSize(new java.awt.Dimension(405, 80));
        jScrollPane1.setViewportView(tabclient);
        if (tabclient.getColumnModel().getColumnCount() > 0) {
            tabclient.getColumnModel().getColumn(0).setMinWidth(40);
            tabclient.getColumnModel().getColumn(0).setPreferredWidth(40);
            tabclient.getColumnModel().getColumn(0).setMaxWidth(60);
        }

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void LogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogOutActionPerformed
        FirstPage firstpage = new FirstPage();
        firstpage.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_LogOutActionPerformed

    private void CarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CarsActionPerformed
        AdminDashboard admindashboard = new AdminDashboard();

        admindashboard.setVisible(true);

        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_CarsActionPerformed

    private void UsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UsernameActionPerformed

    private void PasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PasswordActionPerformed

    private void idsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idsActionPerformed

    private void EmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EmailActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        int[] selectedRows = tabclient.getSelectedRows();

        if (selectedRows.length == 0) {
            // No row is selected
            JOptionPane.showMessageDialog(this, "Please select at least one client to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Confirm deletion
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the selected client(s)?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            // Database connection details
            String url = "jdbc:mysql://localhost:3306/carshop";  // Database URL
            String dbUsername = "root";  // DB username
            String dbPassword = "";  // DB password

            // Queries
            String deleteQuery = "DELETE FROM users WHERE id = ?";  // DELETE query for client
            String updateCarQuery = "UPDATE cars SET is_rented = false WHERE rented_by = ?";  // UPDATE query for rented cars

            try (Connection conn = DriverManager.getConnection(url, dbUsername, dbPassword);
                 PreparedStatement deletePst = conn.prepareStatement(deleteQuery);
                 PreparedStatement updateCarPst = conn.prepareStatement(updateCarQuery)) {

                // Iterate over the selected rows to delete clients
                for (int row : selectedRows) {
                    String clientId = tabclient.getValueAt(row, 0).toString();  // Get client ID from the first column
                    int clientIdInt = Integer.parseInt(clientId);  // Convert ID to integer

                    // Update rented cars for the client
                    updateCarPst.setInt(1, clientIdInt);  // Set client ID in the UPDATE query
                    updateCarPst.executeUpdate();  // Execute the update

                    // Delete the client
                    deletePst.setInt(1, clientIdInt);  // Set client ID in the DELETE query
                    deletePst.executeUpdate();  // Execute the delete
                }

                // After deletion, refresh the clients list in the table
                fetchClients();  // Assuming this method refreshes the table with updated data

                // Show success message
                JOptionPane.showMessageDialog(this, "Selected client(s) and their rented cars updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

            } catch (SQLException ex) {
                // Handle SQL exceptions
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        
    }//GEN-LAST:event_deleteActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        String clientId = (String) ids.getSelectedItem(); // Assuming ids is your JComboBox for client IDs

        // Validate if a client ID is selected
        if ("Select an ID To Update".equals(clientId)) {
            JOptionPane.showMessageDialog(this, "Please select a client ID to update.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get values from text fields
        String uname = Username.getText();
        String emailText = Email.getText();
        String pwd = Password.getText();
        String cty = ct.getSelectedItem().toString();

        // Start building the SQL query dynamically
        StringBuilder queryBuilder = new StringBuilder("UPDATE users SET ");
        
        // Apply constraints and add to the query if valid
        if (!uname.isEmpty() && uname.length() <= 50) {
            queryBuilder.append("username = ?, ");
        }

        if (!emailText.isEmpty()) {
            if (emailText.matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$") && emailText.length() <= 100) {
                queryBuilder.append("email = ?, ");
            } else {
                JOptionPane.showMessageDialog(this, "Invalid email. Please enter a valid email address.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (!pwd.isEmpty()) {
            if (pwd.length() >= 6 && pwd.length() <= 50) {
                queryBuilder.append("password = ?, ");
            } else {
                JOptionPane.showMessageDialog(this, "Invalid password. It must be at least 6 characters and less than 50 characters.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        queryBuilder.append("city = ?, ");
        

        // Remove trailing comma and space
        if (queryBuilder.toString().endsWith(", ")) {
            queryBuilder.setLength(queryBuilder.length() - 2);
        }

        // Add WHERE clause
        queryBuilder.append(" WHERE id = ?");

        // Check if any fields are to be updated
        if (!queryBuilder.toString().contains("=")) {
            JOptionPane.showMessageDialog(this, "No fields to update. Please provide at least one valid field.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Database update logic
        String url = "jdbc:mysql://localhost:3306/carshop";  // Replace with your database URL
        String dbUsername = "root";  // Replace with your DB username
        String dbPassword = "";  // Replace with your DB password

        try (Connection conn = DriverManager.getConnection(url, dbUsername, dbPassword);
             PreparedStatement pst = conn.prepareStatement(queryBuilder.toString())) {

            int paramIndex = 1;

            // Set the parameters in the query
            if (!uname.isEmpty() && uname.length() <= 50) pst.setString(paramIndex++, uname);
            if (!emailText.isEmpty() && emailText.matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$")) pst.setString(paramIndex++, emailText);
            if (!pwd.isEmpty() && pwd.length() >= 6) pst.setString(paramIndex++, pwd);
            if (!cty.isEmpty() && cty.length() <= 50) pst.setString(paramIndex++, cty);
            pst.setString(paramIndex++, clientId); // Set the ID in the WHERE clause

            // Execute the query
            int rowsAffected = pst.executeUpdate();

            if (rowsAffected > 0) {
                fetchClients(); // Refresh the client list or table
                JOptionPane.showMessageDialog(this, "Client updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

                // Clear the fields
                Username.setText("");
                Email.setText("");
                Password.setText("");
                ct.setSelectedIndex(0);
            } else {
                JOptionPane.showMessageDialog(this, "Update failed. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_updateActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
        // Get user input
        String uname = Username.getText();
        String emailText = Email.getText();
        String pwd = Password.getText();
        String cty = ct.getSelectedItem().toString();

        // Validate Username (non-empty, max length 50)
        if (uname.isEmpty() || uname.length() > 50) {
            JOptionPane.showMessageDialog(this, "Invalid username. It should not be empty and should be less than 50 characters.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate Email (non-empty, valid email format, max length 100)
        if (emailText.isEmpty() || !emailText.matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$") || emailText.length() > 100) {
            JOptionPane.showMessageDialog(this, "Invalid email. Please enter a valid email address.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate Password (non-empty, minimum length 8, max length 50)
        if (pwd.isEmpty() || pwd.length() < 6 || pwd.length() > 50) {
            JOptionPane.showMessageDialog(this, "Invalid password. It must be at least 6 characters and less than 50 characters.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate City (non-empty, max length 50)
        

        // Now proceed with database insertion if all validations pass
        String url = "jdbc:mysql://localhost:3306/carshop";  // Replace with your database URL
        String dbUsername = "root";  // Replace with your DB username
        String dbPassword = "";  // Replace with your DB password

        String query = "INSERT INTO users (username, email, password, city) VALUES (?, ?, ?, ?)";

        try (Connection conn = DriverManager.getConnection(url, dbUsername, dbPassword);
             PreparedStatement pst = conn.prepareStatement(query)) {

            // Set parameters for the SQL query
            pst.setString(1, uname);
            pst.setString(2, emailText);
            pst.setString(3, pwd);
            pst.setString(4, cty);

            // Execute the query
            int rowsAffected = pst.executeUpdate();

            if (rowsAffected > 0) {
                fetchClients();
                Username.setText("");  // Clear the username text field
                Email.setText("");     // Clear the email text field
                Password.setText("");  // Clear the password text field
                ct.setSelectedIndex(0);      // Clear the city text field
                JOptionPane.showMessageDialog(this, "Client added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            // Handle exceptions (e.g., database connection errors)
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    
        
    }//GEN-LAST:event_addActionPerformed

    private void filterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filterActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cars;
    private javax.swing.JTextField Email;
    private javax.swing.JButton LogOut;
    private javax.swing.JTextField Password;
    private javax.swing.JTextField Username;
    private javax.swing.JButton add;
    private javax.swing.JComboBox<String> ct;
    private javax.swing.JButton delete;
    private javax.swing.JButton filter;
    private javax.swing.JComboBox<String> ids;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabclient;
    private javax.swing.JLabel txt;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
